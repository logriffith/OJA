**Java**

*Inheritance*
-Child class inherits properties and methods of parent class, unless they are private in parent class
-format: ChildClassName extends ParentClassName
-Java doesn't support Multiple Inheritance in classes
-Hybrid Inheritance is a combination of Hierarchical Inheritance and Multiple Inheritance.
-Thus, Java doesn't support Hybrid Inheritance in classes either
-bottom to top approach: parents methods are loaded into object, then child methods and overridden methods of parent are loaded (ex: Dog object is an instance of a Animal class through inheritance)
-super keyword is used to point to parent class objects
-super keyword is needed to point to a particular constructor in a parent class (constructor chaining) -- ex. super(id, name)
-Object class is the super class of all classes (parent of all classes)
-instance of a child class inherits methods of Object class such as getClass() and hashCode()
-hashCode() method generates (through JVM) a unique code for each object
-getClass() returns the class that an object is instance of
-both hashCode() and getClass() are non-static methods and require an object
-non-static blocks can access both static and non-static (non-static-->not loaded into the memory until object is created)
-static blocks will only be able to access only static


*Method Overriding*
-is modifying a method of a parent class to be used in the child class
-anything that is static, private, and final you cannot override
-best practice to put @Override directly above the overridden method (an annotation)
-with that annotation, the compiler will let the programmer know if they are overriding a method incorrectly
-an override of a method cannot have less visibility than that in the parent class (ex a method that is protected in the parent cannot be overridden in the child class as either default or private, but it can be public or protected)


*Method Overloading*
-same method name, but different parameters, whether in number or type
-happens within the same class and not between classes
-method can be static or non-static, all that matters is that the method name is the same and that the parameters are unique


*Object Casting*
-applicable only in inheritance and only between a child class and its parent (not sibling classes)
-implicit object casting--converting child object (smaller) to parent object (larger) (ex. ParentClass object1 = new ChildClass(), object can then access overridden methods in child class as well as parent's methods but cannot access methods unique to the child)
-explicit object casting--converting parent object (larger) to child object (smaller) (ex ChildClass object2=(ChildClass) object1)
-however, if the child class methods were never loaded into the memory of a parent class object, then the parent class object cannot be casted into a child object because it doesn't have access to those methods (known as a ClassCastException)


**SQL(pronounced "sequel")**

*DDL (Data Definition Language)*
-commands include Create, Drop, Alter, and Truncate
-truncate quickly removes all rows from a set of tables. It has the same effect as an unqualified DELETE on each table, but since it does not actually scan the tables it is faster
-constraints are used to restrict what data goes in your tables
-Check Constraint->allows you to specify that the value in a certain column must satisfy a Boolean (truth-value) expression
--ex: Create Table products (product_no integer, name text, price numeric Constraint positive_price Check (price>0) );
--column constraints can also be written as table constraints, while the reverse is not necessarily possible, since a column constraint is supposed to refer to only the column it is attached to
-Not-Null Constraints->ensures that a column doesn't have null values
--you cannot give explicit names to not-null constraints
--ex: create table products( product_no integer Not Null, name text Not Null, price numeric Not Null Check (price>0) );
-Unique Constraint->ensure that the data contained in a column or a group of columns is unique with respect to all the rows in the table
--In general, a unique constraint is violated when there is more than one row in the table where the values of all of the columns included in the constraint are equal. However, two null values are not considered equal in this comparison.
--ex: create table products (product_no integer Unique, name text, price numeric);
--ex: create table example (a integer, b integer, c integer, Unique (a, c) ); <--(specifies that the combination of values in the indicated columns is unique across the whole table, though any one of the columns need not be (and ordinarily isn't) unique)
-Primary Keys->combination of a unique constraint and a not-null constraint
--indicates that a column or group of columns can be used as a unique identifier for rows in the table
--A table can have at most one primary key
--ex: create table products (product_no integer Primary Key, name text, price numeric );
--ex: create table example (a integer, b integer, c integer, Primary Key (a,c) );
-Foreign Keys->specifies that the values in a column (or a group of columns) must match the values appearing in some row of another table
--this maintains the referential integrity between two related tables
--can also constrain and reference a group of columns
--ex: create table orders (order_id integer Primary Key, product_no integer References products (product_no), quantity integer );
---Now it is impossible to create orders with product_no entries that do not appear in the products table
--A table can contain more than one foreign key constraint. This is used to implement many-to-many relationships between tables
-you can use the Alter Table command to add columns, remove columns, add constraints, remove constraints, change default values, change column data types, rename columns, and rename tables
--ex: Alter Table products Add Column description text; <--(The new column is initially filled with whatever default value is given (null if you don't specify a DEFAULT clause) )
--ex: ALTER TABLE products DROP COLUMN description; <--(Whatever data was in the column disappears. Table constraints involving the column are dropped, too. However, if the column is referenced by a foreign key constraint of another table, PostgreSQL will not silently drop that constraint. You can authorize dropping everything that depends on the column by adding CASCADE)
--ex: ALTER TABLE products DROP CONSTRAINT some_name; <--(To remove a constraint you need to know its name. If you gave it a name then that's easy. Otherwise the system assigned a generated name, which you need to find out. The psql command \d tablename can be helpful here; other interfaces might also provide a way to inspect table details. )
---As with dropping a column, you need to add CASCADE if you want to drop a constraint that something else depends on

*DML (Data Manipulation Language)*
-Insert command allows you to insert (a complete) row(s) of data into a table
--ex: INSERT INTO products VALUES (1, 'Cheese', 9.99); <--(The data values are listed in the order in which the columns appear in the table, separated by commas)
--ex: INSERT INTO products (product_no, name, price) VALUES (1, 'Cheese', 9.99);
--ex: Insert into products (product_no, name, price) Values (1, 'Cheese', 9.99), (2, 'Bread', 1.99), (3, 'Milk', 2.99);
-Update command allows you to modify the data in the table
--need name of the table and column to update, new value of the column, and which row(s) to update
--ex: UPDATE products SET price = 10 WHERE price = 5;
-Delete command allows you to delete the data from a row
--ex: DELETE FROM products WHERE price = 10;